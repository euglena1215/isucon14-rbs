# Generated from lib/isuride/base_handler.rb with RBS::Inline

# mysql2-cs-bind gem にマイクロ秒のサポートを入れる
module Mysql2CsBindPatch
  def quote: (untyped rawvalue) -> untyped
end

module Isuride
  class BaseHandler < Sinatra::Base
    INITIAL_FARE: ::Integer

    FARE_PER_DISTANCE: ::Integer

    class HttpError < Sinatra::Error
      # @dynamic code
      attr_reader code: untyped

      def initialize: (untyped code, untyped message) -> untyped
    end

    # @rbs (singleton(AppHandler::AppPostUsersRequest)) -> AppHandler::AppPostUsersRequest
    #    | (singleton(AppHandler::AppPostPaymentMethodsRequest)) -> AppHandler::AppPostPaymentMethodsRequest
    #    | (singleton(AppHandler::AppPostRidesRequest)) -> AppHandler::AppPostRidesRequest
    #    | (singleton(AppHandler::AppPostRidesEstimatedFareRequest)) -> AppHandler::AppPostRidesEstimatedFareRequest
    #    | (singleton(AppHandler::AppPostRideEvaluationRequest)) -> AppHandler::AppPostRideEvaluationRequest
    #    | (singleton(ChairHandler::ChairPostChairsRequest)) -> ChairHandler::ChairPostChairsRequest
    #    | (singleton(ChairHandler::PostChairActivityRequest)) -> ChairHandler::PostChairActivityRequest
    #    | (singleton(ChairHandler::PostChairCoordinateRequest)) -> ChairHandler::PostChairCoordinateRequest
    #    | (singleton(ChairHandler::PostChairRidesRideIDStatusRequest)) -> ChairHandler::PostChairRidesRideIDStatusRequest
    #    | (singleton(InitializeHandler::PostInitializeRequest)) -> InitializeHandler::PostInitializeRequest
    #    | (singleton(OwnerHandler::OwnerPostOwnersRequest)) -> OwnerHandler::OwnerPostOwnersRequest
    def bind_json: (singleton(AppHandler::AppPostUsersRequest)) -> AppHandler::AppPostUsersRequest
                 | (singleton(AppHandler::AppPostPaymentMethodsRequest)) -> AppHandler::AppPostPaymentMethodsRequest
                 | (singleton(AppHandler::AppPostRidesRequest)) -> AppHandler::AppPostRidesRequest
                 | (singleton(AppHandler::AppPostRidesEstimatedFareRequest)) -> AppHandler::AppPostRidesEstimatedFareRequest
                 | (singleton(AppHandler::AppPostRideEvaluationRequest)) -> AppHandler::AppPostRideEvaluationRequest
                 | (singleton(ChairHandler::ChairPostChairsRequest)) -> ChairHandler::ChairPostChairsRequest
                 | (singleton(ChairHandler::PostChairActivityRequest)) -> ChairHandler::PostChairActivityRequest
                 | (singleton(ChairHandler::PostChairCoordinateRequest)) -> ChairHandler::PostChairCoordinateRequest
                 | (singleton(ChairHandler::PostChairRidesRideIDStatusRequest)) -> ChairHandler::PostChairRidesRideIDStatusRequest
                 | (singleton(InitializeHandler::PostInitializeRequest)) -> InitializeHandler::PostInitializeRequest
                 | (singleton(OwnerHandler::OwnerPostOwnersRequest)) -> OwnerHandler::OwnerPostOwnersRequest

    # @rbs () -> ::Mysql2::Client[::Mysql2::ResultAsHash]
    def db: () -> ::Mysql2::Client[::Mysql2::ResultAsHash]

    # @rbs () -> ::Mysql2::Client[::Mysql2::ResultAsHash]
    def connect_db: () -> ::Mysql2::Client[::Mysql2::ResultAsHash]

    # @rbs [T] () { (Mysql2::Client[::Mysql2::ResultAsHash]) -> T } -> T
    def db_transaction: [T] () { (Mysql2::Client[::Mysql2::ResultAsHash]) -> T } -> T

    # @rbs (Time) -> Integer
    def time_msec: (Time) -> Integer

    # @rbs (Mysql2::Client[::Mysql2::ResultAsHash], String) -> String
    def get_latest_ride_status: (Mysql2::Client[::Mysql2::ResultAsHash], String) -> String

    # マンハッタン距離を求める
    # @rbs (Integer, Integer, Integer, Integer) -> Integer
    def calculate_distance: (Integer, Integer, Integer, Integer) -> Integer

    # @rbs (Integer, Integer, Integer, Integer) -> Integer
    def calculate_fare: (Integer, Integer, Integer, Integer) -> Integer
  end
end
