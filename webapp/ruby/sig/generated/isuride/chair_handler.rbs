# Generated from lib/isuride/chair_handler.rb with RBS::Inline

module Isuride
  class ChairHandler < BaseHandler
    class CurrentChair < Data
      attr_reader id(): String

      attr_reader owner_id(): String

      attr_reader name(): String

      attr_reader model(): String

      attr_reader is_active(): bool

      attr_reader access_token(): String

      attr_reader created_at(): Time

      attr_reader updated_at(): Time

      def self.new: (String id, String owner_id, String name, String model, bool is_active, String access_token, Time created_at, Time updated_at) -> instance
                  | (id: String, owner_id: String, name: String, model: String, is_active: bool, access_token: String, created_at: Time, updated_at: Time) -> instance

      def self.members: () -> [ :id, :owner_id, :name, :model, :is_active, :access_token, :created_at, :updated_at ]

      def members: () -> [ :id, :owner_id, :name, :model, :is_active, :access_token, :created_at, :updated_at ]
    end

    @current_chair: CurrentChair

    class ChairPostChairsRequest < Data
      attr_reader name(): String

      attr_reader model(): String

      attr_reader chair_register_token(): String

      def self.new: (String name, String model, String chair_register_token) -> instance
                  | (name: String, model: String, chair_register_token: String) -> instance

      def self.members: () -> [ :name, :model, :chair_register_token ]

      def members: () -> [ :name, :model, :chair_register_token ]
    end

    class PostChairActivityRequest < Data
      attr_reader is_active(): bool

      def self.new: (bool is_active) -> instance
                  | (is_active: bool) -> instance

      def self.members: () -> [ :is_active ]

      def members: () -> [ :is_active ]
    end

    class PostChairCoordinateRequest < Data
      attr_reader latitude(): untyped

      attr_reader longitude(): untyped

      def self.new: (untyped latitude, untyped longitude) -> instance
                  | (latitude: untyped, longitude: untyped) -> instance

      def self.members: () -> [ :latitude, :longitude ]

      def members: () -> [ :latitude, :longitude ]
    end

    class PostChairRidesRideIDStatusRequest < Data
      attr_reader status(): String

      def self.new: (String status) -> instance
                  | (status: String) -> instance

      def self.members: () -> [ :status ]

      def members: () -> [ :status ]
    end
  end
end
